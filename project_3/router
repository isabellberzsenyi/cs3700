#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

class ForwardingTableEntry:
  """ 
      A single entry in a forwarding table
      Implemented as a class largely to encapsulate print functionality
  """   
  def __init__(self, src, srcif, network, netmask):  
    self.src = src
    self.srcif = srcif
    self.netmask = netmask
    self.network = network

class Router:
  """ Your Router """
  def __init__(self, networks, asn):
    self.asn = asn
    self.routes = []
    self.updates = []
    self.relations = {}
    self.sockets = {}

    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def lookup_routes(self, daddr):
    """ Lookup all valid routes for an address """
    # TODO
    outroutes = []
    return outroutes

  def get_shortest_as_path(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_highest_preference(self, routes):
    """ select the route with the shortest AS Path """
    # TODO
    outroutes = []
    return outroutes

  def get_self_origin(self, routes):
    """ select self originating routes """
    # TODO
    outroutes = []
    return outroutes

  def get_origin_routes(self, routes):
    """ select origin routes: EGP > IGP > UNK """
    # TODO
    outroutes = []
    return outroutes

  def filter_relationships(self, srcif, routes):
    """ Don't allow Peer->Peer, Peer->Prov, or Prov->Peer forwards """
    outroutes = []
    return outroutes

  def get_route(self, srcif, daddr):
    """ Select the best route for a given address """
    # TODO
    peer = None
    routes = self.lookup_routes(daddr)
    # Rules go here
    if routes:
        # 1. Highest Preference
      routes = self.get_highest_preference(routes)
      # 2. Self Origin
      routes = self.get_self_origin(routes)
      # 3. Shortest ASPath
      routes = self.get_shortest_as_path(routes)
      # 4. EGP > IGP > UNK
      routes = self.get_origin_routes(routes)
      # 5. Lowest IP Address
      # TODO
      # Final check: enforce peering relationships
      routes = self.filter_relationships(srcif, routes)
    return self.sockets[peer] if peer else None

  def apply_netmask(self, ip, netmask):
    """
      Apply netmask to the ip address

      ip: ip address
      netmask: netmask associated to a network

      return: masked ip address
    """
    def pairwise_and(pair):
      return int(pair[0]) & int(pair[1])
    
    ip_masked = map(lambda x: str(pairwise_and(x)), zip(ip.split("."), netmask.split(".")))
    return ".".join(list(ip_masked))

  def forward(self, srcif, packet):
    """ 
       Forward a data packet
     
       srcif: source interface, port associated with the src 
       packet: received packet

       return type: boolean 
    """
    # apply netmask to dest ip and check if it matches it with 
    # any of the networks
    for entry in self.routes:
      applied_mask = self.apply_netmask(packet[DEST], entry.netmask)
      if applied_mask == entry.network:
        try:
          data = json.dumps(packet).encode('utf-8')
          self.sockets[entry.srcif].send(data)
          return True
        except:
          return False
  
    return False

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    # TODO (this is the most difficult task, save until last)
    return False

  def update(self, srcif, packet):
    """ 
      Handle update packets

      srcif: the port associated with the src of this message
      packet: the received message

      return type: boolean
    """
    packet_msg = packet[MESG]
    # extract the packet info (network, netmask, etc ...) and
    # save the network, netmask, and peer in some data structure
    self.routes.append(ForwardingTableEntry(packet[SRCE],srcif, packet_msg[NTWK],packet_msg[NMSK]))
    
    # traverse the sockets and send the update announcement to 
    # all neighbors
    for address in self.sockets.keys():
      if address != srcif:
        try:
          # update the destination with the address
          packet[DEST] = address
          # update the source with our router's port address
          packet[SRCE] = address[:len(address) - 1] + "1"
          # if our router is not in the AS Path
          # append it to the AS Path in the announcement
          if self.asn not in packet_msg[APTH]:
            packet[MESG][APTH]= packet_msg[APTH] + [self.asn]

          self.sockets[address].send(json.dumps(packet).encode('utf-8'))
        except:
          return False
    return True

  def revoke(self, packet):
    """ handle revoke packets """
    # TODO
    return True

  def dump(self, packet):
    """ 
      Handles dump table requests 
      
      packet: the received dump message

      return type: JSON containing table message
    """
    # create response extracting info from packet
    response = {
      "src": packet[DEST],
      "dst": packet[SRCE],
      "type": TABL,
      "msg": []
    }

    # put each entry from the forwarding table in the response
    for entry in self.routes:
      entry_resp = {
        "network": entry.network,
        "netmask": entry.netmask,
        "peer": entry.srcif
      }
      response["msg"].append(entry_resp)
    return json.dumps(response).encode('utf-8')

  def handle_packet(self, srcif, packet):
    """
      Dispatches a packet to proper method
    
      srcif: source interface, port associated with the src
      packet: the received message
     
      return type: boolean
    """
    if packet[TYPE] == UPDT:
        self.update(srcif, packet)
        self.updates.append(packet)
    elif packet[TYPE] == DUMP:
        response = self.dump(packet)
        self.sockets[srcif].send(response)
    elif packet[TYPE] == DATA:
        self.forward(srcif, packet)
    else:
      return False
    return True

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    # TODO
    return


  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int)
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.networks, ARGS.asn).run()
