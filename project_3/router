#!/usr/bin/env python3
""" Skeleton Implementation of Project 2 for NEU CS3700 """

import argparse
import json
import select
import functools
import socket

##########################################################################################

# Message Fields
TYPE = "type"
SRCE = "src"
DEST = "dst"
MESG = "msg"
TABL = "table"

# Message Types
DATA = "data"
DUMP = "dump"
UPDT = "update"
RVKE = "revoke"
NRTE = "no route"

# Update Message Fields
NTWK = "network"
NMSK = "netmask"
ORIG = "origin"
LPRF = "localpref"
APTH = "ASPath"
SORG = "selfOrigin"

# internal route info
CUST = "cust"
PEER = "peer"
PROV = "prov"


##########################################################################################

def apply_netmask(ip, netmask):
  """
    Apply netmask to the ip address

    ip: ip address
    netmask: netmask associated to a network

    return: masked ip address
  """
  def pairwise_and(pair):
    return int(pair[0]) & int(pair[1])
    
  ip_masked = map(lambda x: str(pairwise_and(x)), zip(ip.split("."), netmask.split(".")))

  return ".".join(list(ip_masked))

def sub1_netmask(netmask):
  ip_to_binary = list(map(lambda x: format(int(x), 'b'), netmask.split(".")))
  
  count = 0
  for x in ip_to_binary:
    for y in range(len(x)):
      if x[y] == '1':
        count += 1
  count = count - 1

  bin_to_ip = []
  build_ip = ''
  while count >= 0:
    if len(build_ip) == 8:
      bin_to_ip.append(build_ip)
      build_ip = ''
    if count > 0:
      build_ip += '1'
    count -= 1

  if len(build_ip) > 0 and len(build_ip) < 8:
    for x in range(len(build_ip), 8):
      build_ip += '0'
    bin_to_ip.append(build_ip)
  if len(bin_to_ip) < 4:
    for x in range(len(bin_to_ip), 4):
      bin_to_ip.append('00000000')

  sub1_ip = ".".join(list(map(lambda x: str(int(x,2)), bin_to_ip)))
  return sub1_ip


class ForwardingTableEntry:
  """ 
      A single entry in a forwarding table
      Implemented as a class largely to encapsulate print functionality
  """   
  def __init__(self, srcif, network, netmask, localpref, selfOrigin, ASPath, origin):  
    self.srcif = srcif
    self.netmask = netmask
    self.network = network
    self.localpref = localpref
    self.selfOrigin = selfOrigin
    self.ASPath = ASPath
    self.origin = origin

  def __str__(self):
    return f'srcif:{self.srcif} netmask: {self.netmask}, network: {self.network}'

  def __lt__(self, other):
    return self.network < other.network
 
  def adjacent(self, other):
    def to_CIDR(ip_array):
      count = 0
      for x in ip_array:
        for y in range(len(x)):
          if x[y] == '1':
            count += 1
      return count
    
    new_netmask = sub1_netmask(other.netmask)
    netmask_self = apply_netmask(self.network, new_netmask)
    netmask_other = apply_netmask(other.network, new_netmask)
    return netmask_self == netmask_other

  def __eq__(self, other):
    return (self.srcif == other.srcif) and (self.netmask == other.netmask) and (self.localpref == other.localpref) and (self.selfOrigin == other.selfOrigin) and (self.ASPath == other.ASPath) and (self.origin == other.origin) and self.adjacent(other)

class Router:
  """ Your Router """
  def __init__(self, networks, asn):
    self.asn = asn
    self.routes = []
    self.updates = []
    self.relations = {}
    self.sockets = {}

    for relationship in networks:
      network, relation = relationship.split("-")
      self.sockets[network] = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
      self.sockets[network].setblocking(0)
      self.sockets[network].connect(network)
      self.relations[network] = relation

  def forwardUpdatesOrRevoke(self, srcif, packet):
    def sendToGroups(*allowedGroups):
      packet_msg = packet[MESG]
      for address in self.sockets.keys():
        if address != srcif and self.relations[address] in allowedGroups:
          try:
            # update the destination with the address
            packet[DEST] = address
            # update the source with our router's port address
            packet[SRCE] = address[:-1] + "1"
            # if our router is not in the AS Path
            # append it to the AS Path in the announcement
            if packet[TYPE] == UPDT:
              if self.asn not in packet_msg[APTH]:
                packet[MESG][APTH]= packet_msg[APTH] + [self.asn]

            self.sockets[address].send(json.dumps(packet).encode('utf-8'))
          except:
            return False

        if len(self.routes) >= 2:
          self.coalesce()
      return True

    relationship = self.relations[srcif]
    if relationship == CUST:
      sendToGroups(CUST, PEER, PROV)
    else: 
      sendToGroups(CUST)

  def best_path(self, current, new):
    if current is None:
      return new

    def best_origin(current, new):
      origin_map = {
        "IGP": 3,
        "EGP": 2,
        "UNK": 1
      }
      return max(current, new, key= lambda x: origin_map[x.origin])

    if current.netmask != new.netmask:
      return max(current, new, key= lambda x: x.netmask)  
    elif current.localpref != new.localpref:
      return max(current, new, key= lambda x: x.localpref)
    elif current.selfOrigin != new.selfOrigin:
      if current.selfOrigin:
        return current
      else:
        return new
    elif len(current.ASPath) != len(new.ASPath):
      return min(current, new, key= lambda x: len(x.ASPath))
    elif current.origin != new.origin:
      return best_origin(current, new)
    else:
      return min(current, new, key= lambda x: x.srcif)


  def forward(self, srcif, packet):
    """ 
       Forward a data packet
     
       srcif: source interface, port associated with the src 
       packet: received packet

       return type: boolean 
    """
    filtered_routes = [entry for entry in self.routes if apply_netmask(packet[DEST], entry.netmask) == entry.network]
    filter_customers = [entry for entry in filtered_routes if self.relations[entry.srcif] == CUST or self.relations[srcif] == CUST]
    current_best = functools.reduce(self.best_path, filter_customers, None)

    if current_best is not None:
      try:
        data = json.dumps(packet).encode('utf-8')
        self.sockets[current_best.srcif].send(data)
        return True
      except:
        return False
    else:
      # no route
      no_route = {
        "src": srcif[:-1] + "1",
        "dst": packet[SRCE],
        "type": NRTE,
        "msg": {}
      }
      
      self.send_error(self.sockets[srcif], no_route)
    return False

  def coalesce(self):
    """ coalesce any routes that are right next to each other """
    self.routes.sort()
  
    discard_routes = []
    idx = 0

    while idx <  len(self.routes) - 1:
      if self.routes[idx] == self.routes[idx+1]:
        discard_routes.append(self.routes[idx + 1])
        self.routes[idx].netmask = sub1_netmask(self.routes[idx].netmask)
        idx += 1
      idx += 1
    
    for route in discard_routes:
      self.routes.remove(route)

    return False

  def update(self, srcif, packet):
    """ 
      Handle update packets

      srcif: the port associated with the src of this message
      packet: the received message

      return type: boolean
    """
    packet_msg = packet[MESG]
    # extract the packet info (network, netmask, etc ...) and
    # save the network, netmask, and peer in some data structure
    self.routes.append(ForwardingTableEntry(srcif, packet_msg[NTWK], packet_msg[NMSK], packet_msg[LPRF], packet_msg[SORG], packet_msg[APTH], packet_msg[ORIG]))
    
    # traverse the sockets and send the update announcement to 
    # all neighbors
    return self.forwardUpdatesOrRevoke(srcif, packet)

  def disaggregate(self):
    # throw out the routing table
    self.routes = []
    # go through each update
    for update in self.updates:
      packet = update[1]
      packet_msg = packet[MESG]
      if packet[TYPE] == UPDT:
        self.routes.append(ForwardingTableEntry(update[0], packet_msg[NTWK], packet_msg[NMSK], packet_msg[LPRF], packet_msg[SORG], packet_msg[APTH], packet_msg[ORIG]))
      else:
        routesToRevoke = packet[MESG]
        for routeRevokeMsg in routesToRevoke:
          self.routes = list(filter(lambda entry: entry.srcif != update[0] or entry.netmask != routeRevokeMsg[NMSK] or entry.network != routeRevokeMsg[NTWK], self.routes))

  def revoke(self, srcif, packet):
    """ handle revoke packets """
    self.disaggregate()

    return self.forwardUpdatesOrRevoke(srcif, packet)  

  def dump(self, packet):
    """ 
      Handles dump table requests 
      
      packet: the received dump message

      return type: JSON containing table message
    """
    # create response extracting info from packet
    response = {
      "src": packet[DEST],
      "dst": packet[SRCE],
      "type": TABL,
      "msg": []
    }

    # put each entry from the forwarding table in the response
    for entry in self.routes:
      entry_resp = {
        "network": entry.network,
        "netmask": entry.netmask,
        "peer": entry.srcif
      }
      response["msg"].append(entry_resp)
    return json.dumps(response).encode('utf-8')

  def handle_packet(self, srcif, packet):
    """
      Dispatches a packet to proper method
    
      srcif: source interface, port associated with the src
      packet: the received message
     
      return type: boolean
    """
    def append_update(srcif, packet):
      self.updates.append((srcif, packet))

    if packet[TYPE] == UPDT:
      append_update(srcif, packet)
      self.update(srcif, packet)
    elif packet[TYPE] == DUMP:
      response = self.dump(packet)
      self.sockets[srcif].send(response)
    elif packet[TYPE] == DATA:
      self.forward(srcif, packet)
    elif packet[TYPE] == RVKE:
      append_update(srcif, packet)
      self.revoke(srcif, packet)
    else:
      return False
    return True

  def send_error(self, conn, msg):
    """ Send a no_route error message """
    response = json.dumps(msg).encode('utf-8')
    conn.send(response)
    return True


  def run(self):
    """ main loop for the router """
    while True:
      socks = select.select(self.sockets.values(), [], [], 0.1)[0]
      for conn in socks:
        try:
          k = conn.recv(65535)
        except:
          # either died on a connection reset, or was SIGTERM's by parent
          return
        if k:
          for sock in self.sockets:
            if self.sockets[sock] == conn:
              srcif = sock
          msg = json.loads(k)
          
          if not self.handle_packet(srcif, msg):
            self.send_error(conn, msg)
        else:
          return

if __name__ == "__main__":
  PARSER = argparse.ArgumentParser(description='route packets')
  PARSER.add_argument('asn', metavar='asn', type=int)
  PARSER.add_argument('networks', metavar='networks', type=str, nargs='+', help="networks")
  ARGS = PARSER.parse_args()
  Router(ARGS.networks, ARGS.asn).run()
