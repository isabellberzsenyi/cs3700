#!/usr/bin/env python2

import sys, socket, select, time, json, random

# Your ID number
my_id = sys.argv[1]

# The ID numbers of all the other replicas
replica_ids = sys.argv[2:]

def randomTimeout():
	return ((random.random() * 0.15) + 0.15)

class Replica:
	def __init__(self, id, replica_ids):
		self.id = id
		self.replica_ids = replica_ids # the ids of the other replicas
		self.last_election = 0 # start time of the last election
		self.current_term = 0 # number of current term
		self.voted_for = None # who we voted for in the last election
		self.log = [] # the log
		self.kv_store = {} # the key value store, state machine
		self.commit_index = 0 # idx of last log committed
		self.last_applied = 0 # idx of last log applied to state
		self.next_index = {} # array of idx of next log entry to send server [LEADER STATE]
		self.match_index = {} # array of idx known to replicated [LEADER STATE]
		self.number_votes = 0 # number votes received in election
		self.election_timeout = randomTimeout() # random election timeout
		self.leader = "FFFF" # known leader
		self.quorum = {} # quorum for a specific commit index

	def leaderElected(self, leaderElected, electionTerm):
		self.leader = leaderElected
		self.current_term = electionTerm
		self.number_votes = 0
		for replica_id in replica_ids:
			self.next_index[replica_id] = len(self.log)
			self.match_index[replica_id] = 0

	def receiveVote(self, response, socket):
		if response:
			self.number_votes += 1

		if self.number_votes >= ((len(self.replica_ids) / 2) + 1):
			self.leader = self.id
			# send out message that we are the leader
			msg = {'src': self.id, 'dst': 'FFFF', 'leader': self.leader, 'type': 'leader_elected', 'term': self.current_term}
			socket.send(json.dumps(msg))
			self.number_votes = 0

	def respondVote(self, term, candidateId, lastLogIdx, lastLogTerm, socket):
		msg = {'src': self.id, 'dst': candidateId, 'leader': self.leader, 'type': 'respond_vote'}
		self_last_log_term = self.log[-1]['term'] if len(self.log) else 0

		if term < self.current_term: 
			msg['response'] = False
			socket.send(json.dumps(msg))
		elif (self.voted_for is  None or self.voted_for == candidateId) and (lastLogTerm >= self_last_log_term  and lastLogIdx >= (len(self.log) - 1)):
			self.voted_for = candidateId
			msg['response'] = True
			socket.send(json.dumps(msg))

	def requestVote(self, socket):
		self.current_term += 1
		self.number_votes = 1
		self.voted_for = None
		self.election_timeout = randomTimeout()

		last_log_term = self.log[-1]['term'] if len(self.log) else 0
		last_log_idx = len(self.log) - 1 if len(self.log) else 0

		msg = {'src': self.id, 'dst': "FFFF", 'leader': self.leader, 'type': 'request_vote', 'term': self.current_term, 'candidateId': self.id, 'lastLogIndex': last_log_idx, 'lastLogTerm': last_log_term}
		socket.send(json.dumps(msg))

	def sendAppendEntry(self, replica_id, socket):
		#print("appending entry")
		next_index = self.next_index[replica_id]
		last_log_idx = next_index - 1
		last_log_term = self.log[last_log_idx]['term'] if last_log_idx >= 0 else -1
		entries = self.log[next_index:]
		#print('send append entry entries: ' + str(entries))
		#print('self log ' + str(self.log))
		msg = {'src': self.id, 'dst': replica_id, 'leader': self.leader, 'type': 'append_entry', 'term': self.current_term, 'lastLogIndex': last_log_idx, 'lastLogTerm': last_log_term, 'entries': entries, 'leaderCommit': self.commit_index}
		socket.send(json.dumps(msg))
		self.election_timeout = time.time()

	def receiveReplyAppendEntry(self, success, term, replica_id, lastLogIdx, socket):
		print("receive reply" + str(success))
		if success: #True
			self.next_index[replica_id] = len(self.log)
			self.quorum[lastLogIdx] += 1
			#print(" plus 1 quorum")
		
			if self.quorum[lastLogIdx] >= (((len(self.replica_ids) - 1) / 2) + 1):
				# send out 
				for applyIndex in range(self.commit_index, lastLogIdx):
					msg = self.log[applyIndex]
					#print(str(msg))
					self.kv_store[msg['request']['key']] = msg['request']['value']
					response_msg = {'src': self.id, 'dst': msg['request']['src'], 'leader': self.id, 'type': 'ok', 'MID': msg['request']['MID']}
					socket.send(json.dumps(response_msg))
					#print('key' + msg['key'] + ' value ' + msg['value'])
				self.commit_index = lastLogIdx
		else: 
			print("received false")
			self.next_index[replica_id] -= 1
			self.sendAppendEntry(replica_id, socket)	


	def replyAppendEntry(self, leaderTerm, leaderId, leaderLastLogIdx, leaderLastLogTerm, entries, leaderCommit, socket):
		#print("reply append entry")
		success = True
		if leaderTerm < self.current_term:
			print('leader term ' + str(leaderTerm) + ',' + str(self.current_term))
			success = False
		elif len(self.log) <= leaderLastLogIdx:
			print('leader last log idx is greater')
			success = False
		elif leaderLastLogIdx >= 0 and self.log[leaderLastLogIdx]['term'] != leaderLastLogTerm:
			print('term mismatch')
			success = False
		else:
			self.log = self.log[:leaderLastLogIdx]
			self.log.extend(entries)
			if leaderCommit > self.commit_index:
				commit_to = min(leaderCommit, len(self.log) - 1)
				for applyIndex in range(self.commit_index, commit_to):
					msg = self.log[applyIndex]
					self.kv_store[msg['request']['key']] = msg['request']['value']

				self.commit_index = commit_to
			#print(str(entries))
		msg = {'src': self.id, 'dst': leaderId, 'leader': leaderId, 'type': 'reply_append_entry', 'term': self.current_term, 'success': success, 'lastLogIdx': len(self.log) - 1, "replica_id": self.id}
		socket.send(json.dumps(msg))

	def sendHeartbeat(self, socket):
		last_log_idx = len(self.log) - 1 if len(self.log) else 0
		last_log_term = self.log[-1]['term'] if len(self.log) else 0

		msg = {'src': self.id, 'dst': "FFFF", 'leader': self.leader, 'type': 'append_entry', 'term': self.current_term, 'lastLogIndex': last_log_idx, 'lastLogTerm': last_log_term, 'entries': [], 'leaderCommit': self.commit_index}
		socket.send(json.dumps(msg))
		self.election_timeout = time.time()

	def run(self):
		# Connect to the network. All messages to/from other replicas and clients will
		# occur over this socket
		sock = socket.socket(socket.AF_UNIX, socket.SOCK_SEQPACKET)
		sock.connect(self.id)

		while True:
			ready = select.select([sock], [], [], 0.1)[0]
			
			if sock in ready:
				msg_raw = sock.recv(32768)
				
				if len(msg_raw) == 0: continue
				msg = json.loads(msg_raw)
				#print(msg['type'])	
				if msg['type'] in ['get', 'put']:
					if self.id == self.leader:
						#print('get or put')
						# check type of message, respond accordingly
						if msg['type'] == 'get':
							request = {
								'src': msg['src'],
								'key': msg['key'],
								'MID': msg['MID']
							}
							#self.log.append({'type': 'get', 'request': request, 'term': self.current_term})
							value = self.kv_store[msg['key']] if msg['key'] in self.kv_store else ''

							response_msg = {'src': self.id, 'dst': msg['src'], 'leader': self.id, 'type': 'ok', 'MID': msg['MID'], 'value': value}
							sock.send(json.dumps(response_msg))
						else: 
							#print("PUT")
							request = {
								'src': msg['src'],
								'key': msg['key'],
								'value': msg['value'],
								'MID': msg['MID']
							}
							self.log.append({'request': request, 'term': self.current_term})
							self.quorum[len(self.log) - 1] = 0
							#print("main loop log" + str(self.log))
							#self.kv_store[msg['key']] = msg['value']

							#response_msg = {'src': self.id, 'dst': msg['src'], 'leader': self.id, 'type': 'ok', 'MID': msg['MID']}

							for replica_id in self.replica_ids:
								if replica_id is not self.id:
									self.sendAppendEntry(replica_id, sock)
							#self.sendHeartbeat(sock)
					else:
						# if we are not the leader, then redirect
						response_msg = {'src': self.id, 'dst': msg['src'], 'leader': self.leader, 'type': 'redirect', 'MID': msg['MID']}

						sock.send(json.dumps(response_msg))
				elif msg['type'] == 'request_vote':
					self.respondVote(msg['term'], msg['candidateId'], msg['lastLogIndex'], msg['lastLogTerm'], sock)
				elif msg['type'] == 'respond_vote':
					self.receiveVote(msg['response'], sock)
				elif msg['type'] == 'leader_elected':
					self.leaderElected(msg['leader'], msg['term'])
				elif msg['type'] == 'append_entry':
					if len(msg['entries']):
						if self.id != self.leader:
							# go to respond append entry
							self.replyAppendEntry(msg['term'], msg['leader'], msg['lastLogIndex'], msg['lastLogTerm'], msg['entries'], msg['leaderCommit'], sock)
					self.last_election = time.time()
						#print("got append_entry as leader")
				elif msg['type'] == 'reply_append_entry':
					#print("received reply_append_entry")
					if self.id == self.leader:
						self.receiveReplyAppendEntry(msg['success'], msg['term'], msg['replica_id'],msg['lastLogIdx'], sock)
						self.last_election = time.time()
							# WANT TO DO RECEIVE REPLY
					else:
						print("got reply append entry and not leader")
					# go to a received append entry

			clock = time.time()
			if clock-self.last_election > self.election_timeout / 2 and self.id == self.leader:
				# if leader send out heartbeat
				self.sendHeartbeat(sock)
			elif clock-self.last_election > self.election_timeout:	
				# if not check if got heartbeat else election
				self.requestVote(sock)
				self.last_election = clock

if __name__ == '__main__':
	replica = Replica(my_id, replica_ids)
	replica.run()
